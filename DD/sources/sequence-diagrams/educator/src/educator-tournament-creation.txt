title Educator creates a new tournament

participant Educator
participant WebApplication
participant EducatorManager
participant TournamentManager
participant StudentManager

participant NotificationService

participant DatabaseService
participant DataBase
participant MailService

entryspacing 0.9
Educator->WebApplication:login
note over Educator: The login procedure is specified\nin a previous sequence diagram
WebApplication-->Educator:educatorPersonalPage
Educator->WebApplication:createNewTournament()
WebApplication-->Educator: tournament creation page
loop tournament not created
Educator->WebApplication:submit(tournamentName: String, description: String, deadline: Date)
WebApplication->EducatorManager: createTournament(educatorID: int,tournamentName: String, description: String, deadline: Date)
EducatorManager->TournamentManager: createTournament(educatorID: int,tournamentName: String, description: String, deadline: Date)
TournamentManager->DatabaseService:createTournament(educatorID: int,tournamentName: String, description: String, deadline: Date)
DatabaseService->DataBase: createTournament(educatorID: int,tournamentName: String, description: String, deadline: Date)
DataBase-->DatabaseService:result: boolean, tournamentID: int
DatabaseService-->TournamentManager:result: boolean, tournamentID: int
TournamentManager-->EducatorManager:result: boolean, tournamentID: int
EducatorManager-->WebApplication:result: boolean, tournamentID: int
alt !result
WebApplication-->Educator: tournament creation error
else result
WebApplication-->Educator: tournament creation successful
note over WebApplication: The website sends a notification\nto every student about the creation\nof the new tournament
WebApplication->StudentManager:notifyStudentsOfTournament(tournamentID: int)
StudentManager->DatabaseService:getStudentsList()
DatabaseService->DataBase:getStudentsList()
DataBase-->DatabaseService:students: List<Student>
DatabaseService-->StudentManager:students: List<Student>
StudentManager->NotificationService: notifyStudentsOfTournament(tournamentID: int,students: List<Student>)
loop every student is notified && (the value of "result" is true || three false "result" in a row for a student)
NotificationService->DatabaseService:addNotificationForNewTournament(username: String,tournamentID: int)
DatabaseService->DataBase: addNotificationForNewTournament(username: String,tournamentID: int)
DataBase-->DatabaseService: result: boolean
DatabaseService-->NotificationService:result: boolean
alt result == true
NotificationService->MailService:sendEmailForNewTournament(email: String,tournamentID: int)
end
end
end
end





